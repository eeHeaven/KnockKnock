plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
   // id "io.franzbecker.gradle-lombok" version "3.0.0"
}

group = 'com.example'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone'}
}
jar {
    enabled = false
}
bootJar{
    enabled(true)
    archiveClassifier.set("")
}

dependencies {
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    compile("org.mariadb.jdbc:mariadb-java-client")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'com.querydsl', name: 'querydsl-jpa', version: '4.3.1'
    annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: '4.3.1'
    implementation 'junit:junit:4.13.1'
    implementation 'org.projectlombok:lombok:1.18.18'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2:1.4.197'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation('org.slf4j:jcl-over-slf4j')
    implementation('ch.qos.logback:logback-classic')
    //aws s3 사용자 권한 설정
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

}

test {
    useJUnitPlatform()
}
//def querydslDir = 'src/main/generated'
def querydslDir = "$buildDir/generated/querydsl" // (3)
//
querydsl { // (4)
   library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { // (5)
    main.java.srcDirs querydslDir
}

configurations { // (6)
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl { // (7)
    options.annotationProcessorPath = configurations.querydsl
}
compileQuerydsl.doFirst { if(file(querydslDir).exists() ) delete(file(querydslDir)) }

